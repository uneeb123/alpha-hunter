generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      Int     @id @default(autoincrement())
  twitterId               String  @unique
  name                    String
  username                String
  description             String?
  profileImageUrl         String?
  followersCount          Int?
  followingCount          Int?
  tweetCount              Int?
  listedCount             Int?
  likeCount               Int?
  mediaCount              Int?
  smartFollowingCount     Int?
  averageEngagement       Float?
  followerEngagementRatio Float?
  sinceId                 String?
  tweets                  Tweet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id        String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  text      String   @db.Text
  s3Key     String
  timestamp DateTime

  embeddedAt DateTime? // null ⇒ still needs embedding
  pineId     String?   @unique // optional—stores vector-id in Pinecone

  likeCount       Int @default(0)
  retweetCount    Int @default(0)
  replyCount      Int @default(0)
  quoteCount      Int @default(0)
  impressionCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// QUANTITATIVE

enum TransactionType {
  BUY
  SELL
}

model Swap {
  id              Int             @id @default(autoincrement())
  transactionHash String          @unique
  transactionType TransactionType
  blockTimestamp  DateTime
  blockNumber     Int
  walletAddress   String
  pairAddress     String
  exchangeName    String
  baseToken       String
  quoteToken      String
  baseAmount      Decimal
  baseAmountUsd   Decimal
  quoteAmount     Decimal
  quoteAmountUsd  Decimal
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([transactionHash])
  @@index([baseToken])
  @@index([blockTimestamp])
}

model TokenMonitor {
  id            Int      @id @default(autoincrement())
  tokenAddress  String   @unique
  isMonitoring  Boolean  @default(false)
  lastCheckedAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([isMonitoring])
}

model RecentToken {
  id           Int      @id @default(autoincrement())
  tokenAddress String   @unique
  isProcessed  Boolean  @default(false)
  creationTime DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tokenAddress])
  @@index([isProcessed])
}

model CheckedToken {
  id           Int      @id @default(autoincrement())
  tokenAddress String   @unique
  score        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tokenAddress])
}

model TweetEmbeddingCluster {
  id                           Int      @id @default(autoincrement())
  cluster                      Int
  centroidX                    Float
  centroidY                    Float
  radius                       Float
  count                        Int
  topic                        String
  summary                      String?
  highlightText                String
  highlightUsername            String
  highlightTimestamp           DateTime
  highlightSmartFollowingCount Int?
  computedAt                   DateTime @default(now())
  tweetIds                     String[]

  @@index([computedAt])
}

model TelegramChat {
  id         Int      @id @default(autoincrement())
  chatId     String   @unique
  subscribed Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([chatId])
}

model Token {
  id                    Int       @id @default(autoincrement())
  address               String
  decimals              Int
  price                 Float?
  lastTradeUnixTime     Int
  liquidity             Float
  logoURI               String?
  mc                    Float?
  name                  String
  symbol                String
  v24hChangePercent     Float?
  v24hUSD               Float
  chain                 String
  updatedAt             DateTime  @updatedAt
  trade24hCount         Int
  holderCount           Int
  fullyDilutedValuation Float?
  creationTime          DateTime?

  @@unique([address, chain])
  @@index([address])
}

/// Stores filter parameters for Birdeye alert API
model Filter {
  id                            Int      @id @default(autoincrement())
  name                          String   @unique
  sort_by                       String
  sort_type                     String
  min_liquidity                 Float?
  max_liquidity                 Float?
  min_market_cap                Float?
  max_market_cap                Float?
  min_fdv                       Float?
  max_fdv                       Float?
  min_recent_listing_time       Int?
  max_recent_listing_time       Int?
  min_last_trade_unix_time      Int?
  max_last_trade_unix_time      Int?
  min_holder                    Int?
  min_volume_1h_usd             Float?
  min_volume_2h_usd             Float?
  min_volume_4h_usd             Float?
  min_volume_8h_usd             Float?
  min_volume_24h_usd            Float?
  min_volume_1h_change_percent  Float?
  min_volume_2h_change_percent  Float?
  min_volume_4h_change_percent  Float?
  min_volume_8h_change_percent  Float?
  min_volume_24h_change_percent Float?
  min_price_change_1h_percent   Float?
  min_price_change_2h_percent   Float?
  min_price_change_4h_percent   Float?
  min_price_change_8h_percent   Float?
  min_price_change_24h_percent  Float?
  min_trade_1h_count            Int?
  min_trade_2h_count            Int?
  min_trade_4h_count            Int?
  min_trade_8h_count            Int?
  min_trade_24h_count           Int?
  chain                         String?  @default("solana")
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}
