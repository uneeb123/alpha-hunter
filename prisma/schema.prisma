generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      Int     @id @default(autoincrement())
  twitterId               String  @unique
  name                    String
  username                String
  description             String?
  profileImageUrl         String?
  followersCount          Int?
  followingCount          Int?
  tweetCount              Int?
  listedCount             Int?
  likeCount               Int?
  mediaCount              Int?
  smartFollowingCount     Int?
  averageEngagement       Float?
  followerEngagementRatio Float?
  sinceId                 String?
  tweets                  Tweet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id        String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  text      String   @db.Text
  s3Key     String
  timestamp DateTime

  embeddedAt DateTime? // null ⇒ still needs embedding
  pineId     String?   @unique // optional—stores vector-id in Pinecone

  likeCount       Int @default(0)
  retweetCount    Int @default(0)
  replyCount      Int @default(0)
  quoteCount      Int @default(0)
  impressionCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// QUANTITATIVE

enum TransactionType {
  BUY
  SELL
}

model Swap {
  id              Int             @id @default(autoincrement())
  transactionHash String          @unique
  transactionType TransactionType
  blockTimestamp  DateTime
  blockNumber     Int
  walletAddress   String
  pairAddress     String
  exchangeName    String
  baseToken       String
  quoteToken      String
  baseAmount      Decimal
  baseAmountUsd   Decimal
  quoteAmount     Decimal
  quoteAmountUsd  Decimal
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([transactionHash])
  @@index([baseToken])
  @@index([blockTimestamp])
}

model TokenMonitor {
  id            Int      @id @default(autoincrement())
  tokenAddress  String   @unique
  isMonitoring  Boolean  @default(false)
  lastCheckedAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([isMonitoring])
}

model RecentToken {
  id           Int      @id @default(autoincrement())
  tokenAddress String   @unique
  isProcessed  Boolean  @default(false)
  creationTime DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tokenAddress])
  @@index([isProcessed])
}

model CheckedToken {
  id           Int      @id @default(autoincrement())
  tokenAddress String   @unique
  score        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tokenAddress])
}

model BotResponse {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  response  String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model TweetEmbeddingCluster {
  id                           Int      @id @default(autoincrement())
  cluster                      Int
  centroidX                    Float
  centroidY                    Float
  radius                       Float
  count                        Int
  topic                        String
  summary                      String?
  highlightText                String
  highlightUsername            String
  highlightTimestamp           DateTime
  highlightSmartFollowingCount Int?
  computedAt                   DateTime @default(now())

  @@index([computedAt])
}
