generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      Int      @id @default(autoincrement())
  twitterId               String   @unique
  name                    String
  username                String
  description             String?
  profileImageUrl         String?
  followersCount          Int?
  followingCount          Int?
  tweetCount              Int?
  listedCount             Int?
  likeCount               Int?
  mediaCount              Int?
  smartFollowingCount     Int?
  averageEngagement       Float?
  followerEngagementRatio Float?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

// QUANTITATIVE

enum TransactionType {
  BUY
  SELL
}

model Swap {
  id              Int             @id @default(autoincrement())
  transactionHash String          @unique
  transactionType TransactionType
  blockTimestamp  DateTime
  blockNumber     Int
  walletAddress   String
  pairAddress     String
  exchangeName    String
  baseToken       String
  quoteToken      String
  baseAmount      Decimal
  baseAmountUsd   Decimal
  quoteAmount     Decimal
  quoteAmountUsd  Decimal
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([transactionHash])
  @@index([baseToken])
  @@index([blockTimestamp])
}

model TokenMonitor {
  id            Int      @id @default(autoincrement())
  tokenAddress  String   @unique
  isMonitoring  Boolean  @default(false)
  lastCheckedAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([isMonitoring])
}

model RecentToken {
  id           Int      @id @default(autoincrement())
  tokenAddress String   @unique
  isProcessed  Boolean  @default(false)
  creationTime DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tokenAddress])
  @@index([isProcessed])
}

model CheckedToken {
  id           Int      @id @default(autoincrement())
  tokenAddress String   @unique
  score        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([tokenAddress])
}

// REVISED QUALITATIVE

model Tweet {
  id        String   @id // Twitter's tweet ID
  text      String   @db.Text
  authorId  String // Twitter user ID
  vectorId  String? // Pinecone vector ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([createdAt])
}

model UserTimeline {
  id             Int       @id @default(autoincrement())
  twitterId      String    @unique // Twitter user ID
  lastTweetId    String? // Last processed tweet ID
  lastSynced     DateTime?
  nextRun        DateTime?
  rateLimitReset DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([nextRun])
}
